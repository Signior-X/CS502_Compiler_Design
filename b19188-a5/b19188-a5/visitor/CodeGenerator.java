//
// Generated by JTB 1.3.2
//

package visitor;

import syntaxtree.*;

import java.util.*;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order. Your visitors may extend this class.
 */
public class CodeGenerator implements GJNoArguVisitor<String> {
   HashMap<Node, Set<String>> resultMap;

   public static String finalCode = "";

   private String currentClass = "";
   private String currentMethod = "";
   private boolean insideMethod = false;

   private String methodTemps = "";
   private String methodBody = "";
   private String methodParams = "";

   public CodeGenerator(HashMap<Node, Set<String>> r) {
      resultMap = r;
      finalCode = "";
   }

   private void initMethod() {
      String methodKey = GraphVisitor.getMethodKey(currentClass, currentMethod);
      for (int i = 0; i < GraphVisitor.RegisterLimit; i++) {
         String st = "Object " + "register__" + i + ";";
         addToMethodCode(st, 4);
      }

      int spilled = 0;
      HashMap<String, String> replacements = GraphVisitor.methodReplacements.get(methodKey);
      for (String key : replacements.keySet()) {
         if (isSpilled(replacements.get(key)) != -1) {
            spilled++;
         }
      }
      addToMethodCode("alloca(" + spilled + ");", 4);
      addToMethodCode("", 4);
   }

   private void addToFinalCode(String line, int sp) {
      while (sp-- > 0) {
         finalCode += " ";
      }

      finalCode += line + "\n";
   }

   private void addToMethodCode(String line, int sp) {
      while (sp-- > 0) {
         methodBody += " ";
      }

      methodBody += line + "\n";
   }

   private int isSpilled(String res) {
      // Ensue that you give the result value
      if (res.substring(0, 5).equals("spill")) {
         // find the spill value for this
         return Integer.parseInt(res.substring(7));
      }
      return -1;
   }

   private int isSpilled(String var, boolean resultReady) {
      if (!resultReady) {
         String methodKey = GraphVisitor.getMethodKey(currentClass, currentMethod);
         String res = GraphVisitor.methodReplacements.get(methodKey).get(var);
         return isSpilled(res);
      } else {
         return isSpilled(var);
      }
   }

   private String getVariableForRHS(String iden) {
      if (!insideMethod)
         return iden;
      else {
         String methodKey = GraphVisitor.getMethodKey(currentClass, currentMethod);
         if (GraphVisitor.methodReplacements.get(methodKey).containsKey(iden)) {
            String res = GraphVisitor.methodReplacements.get(methodKey).get(iden);
            String type = GraphVisitor.varDeclarations.get(methodKey).get(iden);

            // First check if the variable is a load statement or not
            // If yes, get from alloc, else get from register

            if (isSpilled(res) != -1) {
               return "(" + "(" + type + ") " + "load(" + isSpilled(res) + ")" + ")";
            } else {
               return "(" + "(" + type + ") " + res + ")";
            }
         }
         return iden;
      }
   }

   private String getVariableForLHS(String iden) {
      if (!insideMethod)
         return iden;
      else {
         String methodKey = GraphVisitor.getMethodKey(currentClass, currentMethod);
         if (GraphVisitor.methodReplacements.get(methodKey).containsKey(iden)) {
            String res = GraphVisitor.methodReplacements.get(methodKey).get(iden);
            return res;
         }
         return iden;
      }
   }

   private void methodEnds() {
      finalCode += methodTemps;
      finalCode += methodBody;
      methodTemps = "";
      methodBody = "";
      currentMethod = "";
      insideMethod = false;
      addToFinalCode("}", 2);
   }

   //
   // Auto class visitors--probably don't need to be overridden.
   //
   public String visit(NodeList n) {
      String _ret = null;
      int _count = 0;
      for (Enumeration<Node> e = n.elements(); e.hasMoreElements();) {
         e.nextElement().accept(this);
         _count++;
      }
      return _ret;
   }

   public String visit(NodeListOptional n) {
      if (n.present()) {
         String _ret = null;
         int _count = 0;
         for (Enumeration<Node> e = n.elements(); e.hasMoreElements();) {
            e.nextElement().accept(this);
            _count++;
         }
         return _ret;
      } else
         return null;
   }

   public String visit(NodeOptional n) {
      if (n.present())
         return n.node.accept(this);
      else
         return null;
   }

   public String visit(NodeSequence n) {
      String _ret = null;
      int _count = 0;
      for (Enumeration<Node> e = n.elements(); e.hasMoreElements();) {
         e.nextElement().accept(this);
         _count++;
      }
      return _ret;
   }

   public String visit(NodeToken n) {
      return null;
   }

   //
   // User-generated visitor methods below
   //

   /**
    * f0 -> ( <REGLIMIT> )?
    * f1 -> MainClass()
    * f2 -> ( TypeDeclaration() )*
    * f3 -> <EOF>
    */
   public String visit(Goal n) {
      String _ret = null;
      // if (n.f0.present()) {
      // System.out.println("Register Limit: " + n.f0.node);
      addToFinalCode(n.f0.tokenImage, 0);
      // }
      // n.f0.accept(this);

      addToFinalCode("import static a5.Memory.*;", 0);
      n.f1.accept(this);
      n.f2.accept(this);
      return _ret;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "{"
    * f3 -> "public"
    * f4 -> "static"
    * f5 -> "void"
    * f6 -> "main"
    * f7 -> "("
    * f8 -> "String"
    * f9 -> "["
    * f10 -> "]"
    * f11 -> Identifier()
    * f12 -> ")"
    * f13 -> "{"
    * f14 -> ( VarDeclaration() )*
    * f15 -> ( Statement() )*
    * f16 -> "}"
    * f17 -> "}"
    */
   public String visit(MainClass n) {
      String _ret = null;
      n.f0.accept(this);
      currentClass = n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
      n.f5.accept(this);
      n.f6.accept(this);
      currentMethod = "main";
      n.f7.accept(this);
      n.f8.accept(this);
      n.f9.accept(this);
      n.f10.accept(this);
      String argName = n.f11.accept(this);
      n.f12.accept(this);
      n.f13.accept(this);
      insideMethod = true;
      initMethod();
      addToFinalCode("class " + currentClass + " {", 0);
      addToFinalCode("public static void main(String[] " + argName + ") {", 2);
      n.f14.accept(this);
      n.f15.accept(this);
      n.f16.accept(this);
      methodEnds();
      n.f17.accept(this);
      addToFinalCode("}", 0);
      return _ret;
   }

   /**
    * f0 -> ClassDeclaration()
    * | ClassExtendsDeclaration()
    */
   public String visit(TypeDeclaration n) {
      String _ret = null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "{"
    * f3 -> ( VarDeclaration() )*
    * f4 -> ( MethodDeclaration() )*
    * f5 -> "}"
    */
   public String visit(ClassDeclaration n) {
      String _ret = null;
      n.f0.accept(this);
      currentClass = n.f1.accept(this);
      n.f2.accept(this);
      addToFinalCode("class " + currentClass + " {", 0);
      n.f3.accept(this);
      n.f4.accept(this);
      n.f5.accept(this);

      addToFinalCode("}", 0);
      return _ret;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "extends"
    * f3 -> Identifier()
    * f4 -> "{"
    * f5 -> ( VarDeclaration() )*
    * f6 -> ( MethodDeclaration() )*
    * f7 -> "}"
    */
   public String visit(ClassExtendsDeclaration n) {
      String _ret = null;
      n.f0.accept(this);
      currentClass = n.f1.accept(this);
      n.f2.accept(this);
      String extendingClass = n.f3.accept(this);
      n.f4.accept(this);
      addToFinalCode("class " + currentClass + " extends " + extendingClass + " {", 0);
      n.f5.accept(this);
      n.f6.accept(this);
      n.f7.accept(this);

      addToFinalCode("}", 0);
      return _ret;
   }

   /**
    * f0 -> Type()
    * f1 -> Identifier()
    * f2 -> ";"
    */
   public String visit(VarDeclaration n) {
      String _ret = null;
      String type = n.f0.accept(this);
      String var = n.f1.accept(this);
      n.f2.accept(this);

      if (insideMethod) {
         // local variables
      } else {
         // field variables
         addToFinalCode(type + " " + var + ";", 0);
      }
      return _ret;
   }

   /**
    * f0 -> "public"
    * f1 -> Type()
    * f2 -> Identifier()
    * f3 -> "("
    * f4 -> ( FormalParameterList() )?
    * f5 -> ")"
    * f6 -> "{"
    * f7 -> ( VarDeclaration() )*
    * f8 -> ( Statement() )*
    * f9 -> "return"
    * f10 -> Identifier()
    * f11 -> ";"
    * f12 -> "}"
    */
   public String visit(MethodDeclaration n) {
      String _ret = null;
      n.f0.accept(this);
      String methodType = n.f1.accept(this);
      currentMethod = n.f2.accept(this);
      n.f3.accept(this);
      methodParams = "";
      n.f4.accept(this);
      n.f5.accept(this);
      n.f6.accept(this);
      if (methodParams.length() > 0) {
         addToFinalCode("public " + methodType + " " + currentMethod + "("
               + methodParams.substring(0, methodParams.length() - 1) + ") {", 2);
      } else {
         addToFinalCode("public " + methodType + " " + currentMethod + "(" + methodParams + ") {", 2);
      }
      insideMethod = true;
      initMethod();
      n.f7.accept(this);
      n.f8.accept(this);
      n.f9.accept(this);
      String returnVar = n.f10.accept(this);
      n.f11.accept(this);

      addToMethodCode("return " + getVariableForRHS(returnVar) + ";", 4);
      n.f12.accept(this);
      methodEnds();

      insideMethod = false;
      return _ret;
   }

   /**
    * f0 -> FormalParameter()
    * f1 -> ( FormalParameterRest() )*
    */
   public String visit(FormalParameterList n) {
      String _ret = null;
      n.f0.accept(this);
      n.f1.accept(this);
      return _ret;
   }

   /**
    * f0 -> Type()
    * f1 -> Identifier()
    */
   public String visit(FormalParameter n) {
      String _ret = null;
      String type = n.f0.accept(this);
      String var = n.f1.accept(this);
      methodParams += type + " " + var + ",";
      return _ret;
   }

   /**
    * f0 -> ","
    * f1 -> FormalParameter()
    */
   public String visit(FormalParameterRest n) {
      String _ret = null;
      n.f0.accept(this);
      n.f1.accept(this);
      return _ret;
   }

   /**
    * f0 -> ArrayType()
    * | BooleanType()
    * | IntegerType()
    * | FloatType()
    * | Identifier()
    */
   public String visit(Type n) {
      String _ret = null;
      return n.f0.accept(this);
   }

   /**
    * f0 -> "int"
    * f1 -> "["
    * f2 -> "]"
    */
   public String visit(ArrayType n) {
      String _ret = null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      return "int[]";
   }

   /**
    * f0 -> "float"
    */
   public String visit(FloatType n) {
      String _ret = null;
      n.f0.accept(this);
      return "float";
   }

   /**
    * f0 -> "boolean"
    */
   public String visit(BooleanType n) {
      String _ret = null;
      n.f0.accept(this);
      return "boolean";
   }

   /**
    * f0 -> "int"
    */
   public String visit(IntegerType n) {
      String _ret = null;
      n.f0.accept(this);
      return "int";
   }

   /**
    * f0 -> Block()
    * | AssignmentStatement()
    * | ArrayAssignmentStatement()
    * | FieldAssignmentStatement()
    * | IfStatement()
    * | WhileStatement()
    * | PrintStatement()
    * | LivenessQueryStatement()
    */
   public String visit(Statement n) {
      String _ret = null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> "{"
    * f1 -> ( Statement() )*
    * f2 -> "}"
    */
   public String visit(Block n) {
      String _ret = null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "="
    * f2 -> Expression()
    * f3 -> ";"
    */
   public String visit(AssignmentStatement n) {
      String _ret = null;
      String iden = n.f0.accept(this);
      n.f1.accept(this);
      String expr = n.f2.accept(this);
      expr = getVariableForRHS(expr);
      n.f3.accept(this);

      if (isSpilled(iden, false) != -1) {
         addToMethodCode("store(" + isSpilled(iden, false) + ", " + expr + ");", 4);
      } else {
         iden = getVariableForLHS(iden);
         addToMethodCode(iden + " = " + expr + ";", 4);
      }
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "["
    * f2 -> Identifier()
    * f3 -> "]"
    * f4 -> "="
    * f5 -> Identifier()
    * f6 -> ";"
    */
   public String visit(ArrayAssignmentStatement n) {
      String _ret = null;
      String base = n.f0.accept(this);
      n.f1.accept(this);
      String use = n.f2.accept(this);
      use = getVariableForRHS(use);
      n.f3.accept(this);
      n.f4.accept(this);
      String rhs = n.f5.accept(this);
      rhs = getVariableForRHS(rhs);
      n.f6.accept(this);

      addToMethodCode(base + "[" + use + "]" + " = " + rhs + ";", 4);
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "."
    * f2 -> Identifier()
    * f3 -> "="
    * f4 -> Identifier()
    * f5 -> ";"
    */
   public String visit(FieldAssignmentStatement n) {
      String _ret = null;
      String base = n.f0.accept(this);
      n.f1.accept(this);
      String field = n.f2.accept(this);
      n.f3.accept(this);
      String var = n.f4.accept(this);
      var = getVariableForRHS(var);
      n.f5.accept(this);

      addToMethodCode(base + "." + field + " = " + var + ";", 4);
      return _ret;
   }

   /**
    * f0 -> IfthenElseStatement()
    * | IfthenStatement()
    */
   public String visit(IfStatement n) {
      String _ret = null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> "if"
    * f1 -> "("
    * f2 -> Identifier()
    * f3 -> ")"
    * f4 -> Statement()
    */
   public String visit(IfthenStatement n) {
      String _ret = null;
      n.f0.accept(this);
      n.f1.accept(this);
      String iden = getVariableForRHS(n.f2.accept(this));
      n.f3.accept(this);
      addToMethodCode("if (" + iden + ") {", 4);
      n.f4.accept(this);
      addToMethodCode("}", 4);
      return _ret;
   }

   /**
    * f0 -> "if"
    * f1 -> "("
    * f2 -> Identifier()
    * f3 -> ")"
    * f4 -> Statement()
    * f5 -> "else"
    * f6 -> Statement()
    */
   public String visit(IfthenElseStatement n) {
      String _ret = null;
      n.f0.accept(this);
      n.f1.accept(this);
      String iden = getVariableForRHS(n.f2.accept(this));
      n.f3.accept(this);
      addToMethodCode("if (" + iden + ") {", 4);
      n.f4.accept(this);
      n.f5.accept(this);
      addToMethodCode("} else {", 4);
      n.f6.accept(this);
      addToMethodCode("}", 4);
      return _ret;
   }

   /**
    * f0 -> "while"
    * f1 -> "("
    * f2 -> Identifier()
    * f3 -> ")"
    * f4 -> Statement()
    */
   public String visit(WhileStatement n) {
      String _ret = null;
      n.f0.accept(this);
      n.f1.accept(this);
      String iden = getVariableForRHS(n.f2.accept(this));
      n.f3.accept(this);

      addToMethodCode("while(" + iden + ") {", 4);
      n.f4.accept(this);
      addToMethodCode("}", 4);
      return _ret;
   }

   /**
    * f0 -> "System.out.println"
    * f1 -> "("
    * f2 -> Identifier()
    * f3 -> ")"
    * f4 -> ";"
    */
   public String visit(PrintStatement n) {
      String _ret = null;
      n.f0.accept(this);
      n.f1.accept(this);
      String iden = n.f2.accept(this);
      iden = getVariableForRHS(iden);
      n.f3.accept(this);
      n.f4.accept(this);

      addToMethodCode("System.out.println(" + iden + ");", 4);
      return _ret;
   }

   /**
    * f0 -> <SCOMMENT1>
    * f1 -> <LIVENESSQUERY>
    * f2 -> <SCOMMENT2>
    */
   public String visit(LivenessQueryStatement n) {
      String _ret = null;

      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);

      return _ret;
   }

   /**
    * f0 -> OrExpression()
    * | AndExpression()
    * | CompareExpression()
    * | neqExpression()
    * | PlusExpression()
    * | MinusExpression()
    * | TimesExpression()
    * | DivExpression()
    * | ArrayLookup()
    * | ArrayLength()
    * | MessageSend()
    * | PrimaryExpression()
    */
   public String visit(Expression n) {
      return n.f0.accept(this);
   }

   /**
    * f0 -> Identifier()
    * f1 -> "&&"
    * f2 -> Identifier()
    */
   public String visit(AndExpression n) {
      String iden1 = getVariableForRHS(n.f0.accept(this));
      n.f1.accept(this);
      String iden2 = getVariableForRHS(n.f2.accept(this));
      return iden1 + " && " + iden2;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "||"
    * f2 -> Identifier()
    */
   public String visit(OrExpression n) {
      String iden1 = getVariableForRHS(n.f0.accept(this));
      n.f1.accept(this);
      String iden2 = getVariableForRHS(n.f2.accept(this));
      return iden1 + " || " + iden2;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "<="
    * f2 -> Identifier()
    */
   public String visit(CompareExpression n) {
      String iden1 = getVariableForRHS(n.f0.accept(this));
      n.f1.accept(this);
      String iden2 = getVariableForRHS(n.f2.accept(this));
      return iden1 + " <= " + iden2;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "!="
    * f2 -> Identifier()
    */
   public String visit(neqExpression n) {
      String iden1 = getVariableForRHS(n.f0.accept(this));
      n.f1.accept(this);
      String iden2 = getVariableForRHS(n.f2.accept(this));
      return iden1 + " != " + iden2;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "+"
    * f2 -> Identifier()
    */
   public String visit(PlusExpression n) {
      String iden1 = getVariableForRHS(n.f0.accept(this));
      n.f1.accept(this);
      String iden2 = getVariableForRHS(n.f2.accept(this));
      return iden1 + " + " + iden2;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "-"
    * f2 -> Identifier()
    */
   public String visit(MinusExpression n) {
      String iden1 = getVariableForRHS(n.f0.accept(this));
      n.f1.accept(this);
      String iden2 = getVariableForRHS(n.f2.accept(this));
      return iden1 + " - " + iden2;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "*"
    * f2 -> Identifier()
    */
   public String visit(TimesExpression n) {
      String iden1 = getVariableForRHS(n.f0.accept(this));
      n.f1.accept(this);
      String iden2 = getVariableForRHS(n.f2.accept(this));
      return iden1 + " * " + iden2;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "/"
    * f2 -> Identifier()
    */
   public String visit(DivExpression n) {
      String iden1 = getVariableForRHS(n.f0.accept(this));
      n.f1.accept(this);
      String iden2 = getVariableForRHS(n.f2.accept(this));
      return iden1 + " / " + iden2;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "["
    * f2 -> Identifier()
    * f3 -> "]"
    */
   public String visit(ArrayLookup n) {
      String _ret = null;
      String iden1 = getVariableForRHS(n.f0.accept(this));
      n.f1.accept(this);
      String iden2 = getVariableForRHS(n.f2.accept(this));
      n.f3.accept(this);
      return iden1 + "[" + iden2 + "]";
   }

   /**
    * f0 -> Identifier()
    * f1 -> "."
    * f2 -> "length"
    */
   public String visit(ArrayLength n) {
      String _ret = null;
      String iden = getVariableForRHS(n.f0.accept(this));
      n.f1.accept(this);
      n.f2.accept(this);
      return iden + ".length";
   }

   /**
    * f0 -> Identifier()
    * f1 -> "."
    * f2 -> Identifier()
    * f3 -> "("
    * f4 -> ( ArgList() )?
    * f5 -> ")"
    */
   public String visit(MessageSend n) {
      String _ret = null;
      String base = getVariableForRHS(n.f0.accept(this));
      n.f1.accept(this);
      String fun = n.f2.accept(this);
      n.f3.accept(this);

      methodParams = "";
      n.f4.accept(this);
      n.f5.accept(this);

      if (methodParams.length() > 0) {
         return (base + "." + fun + "(" + methodParams.substring(0, methodParams.length() - 1) + ")");
      } else {
         return (base + "." + fun + "(" + methodParams + ")");
      }
   }

   /**
    * f0 -> Identifier()
    * f1 -> ( ArgRest() )*
    */
   public String visit(ArgList n) {
      String _ret = null;
      String iden = getVariableForRHS(n.f0.accept(this));
      methodParams += iden + ",";
      n.f1.accept(this);
      return _ret;
   }

   /**
    * f0 -> ","
    * f1 -> Identifier()
    */
   public String visit(ArgRest n) {
      String _ret = null;
      n.f0.accept(this);
      String iden = getVariableForRHS(n.f0.accept(this));
      methodParams += iden + ",";
      return _ret;
   }

   /**
    * f0 -> IntegerLiteral()
    * | FloatLiteral()
    * | TrueLiteral()
    * | FalseLiteral()
    * | Identifier()
    * | ThisExpression()
    * | ArrayAllocationExpression()
    * | AllocationExpression()
    * | NotExpression()
    */
   public String visit(PrimaryExpression n) {
      String _ret = null;
      String expr = n.f0.accept(this);
      return getVariableForRHS(expr);
   }

   /**
    * f0 -> <INTEGER_LITERAL>
    */
   public String visit(IntegerLiteral n) {
      String _ret = null;
      n.f0.accept(this);
      return n.f0.tokenImage;
   }

   /**
    * f0 -> <FLOAT_LITERAL>
    */
   public String visit(FloatLiteral n) {
      String _ret = null;
      n.f0.accept(this);
      return n.f0.tokenImage;
   }

   /**
    * f0 -> "true"
    */
   public String visit(TrueLiteral n) {
      String _ret = null;
      n.f0.accept(this);
      return "true";
   }

   /**
    * f0 -> "false"
    */
   public String visit(FalseLiteral n) {
      String _ret = null;
      n.f0.accept(this);
      return "false";
   }

   /**
    * f0 -> <IDENTIFIER>
    */
   public String visit(Identifier n) {
      String _ret = null;
      n.f0.accept(this);
      return n.f0.tokenImage;
   }

   /**
    * f0 -> "this"
    */
   public String visit(ThisExpression n) {
      String _ret = null;
      n.f0.accept(this);
      return "this";
   }

   /**
    * f0 -> "new"
    * f1 -> "int"
    * f2 -> "["
    * f3 -> Identifier()
    * f4 -> "]"
    */
   public String visit(ArrayAllocationExpression n) {
      String _ret = null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      String iden = getVariableForRHS(n.f3.accept(this));
      n.f4.accept(this);
      return "new int [" + iden + "]";
   }

   /**
    * f0 -> "new"
    * f1 -> Identifier()
    * f2 -> "("
    * f3 -> ")"
    */
   public String visit(AllocationExpression n) {
      String _ret = null;
      n.f0.accept(this);
      String iden = n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      return "new " + iden + "()";
   }

   /**
    * f0 -> "!"
    * f1 -> Identifier()
    */
   public String visit(NotExpression n) {
      String _ret = null;
      n.f0.accept(this);
      return (getVariableForRHS(n.f1.accept(this)));
   }

}
