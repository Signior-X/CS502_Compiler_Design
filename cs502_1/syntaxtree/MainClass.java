//
// Generated by JTB 1.3.2
//

package syntaxtree;

/**
 * Grammar production:
 * f0 -> "class"
 * f1 -> Identifier()
 * f2 -> ( ExtendsClass() )*
 * f3 -> "{"
 * f4 -> "public"
 * f5 -> "static"
 * f6 -> "void"
 * f7 -> "main"
 * f8 -> "("
 * f9 -> "String"
 * f10 -> "["
 * f11 -> "]"
 * f12 -> Identifier()
 * f13 -> ")"
 * f14 -> "{"
 * f15 -> PrintStatement()
 * f16 -> "}"
 * f17 -> "}"
 */
public class MainClass implements Node {
   public NodeToken f0;
   public Identifier f1;
   public NodeListOptional f2;
   public NodeToken f3;
   public NodeToken f4;
   public NodeToken f5;
   public NodeToken f6;
   public NodeToken f7;
   public NodeToken f8;
   public NodeToken f9;
   public NodeToken f10;
   public NodeToken f11;
   public Identifier f12;
   public NodeToken f13;
   public NodeToken f14;
   public PrintStatement f15;
   public NodeToken f16;
   public NodeToken f17;

   public MainClass(NodeToken n0, Identifier n1, NodeListOptional n2, NodeToken n3, NodeToken n4, NodeToken n5, NodeToken n6, NodeToken n7, NodeToken n8, NodeToken n9, NodeToken n10, NodeToken n11, Identifier n12, NodeToken n13, NodeToken n14, PrintStatement n15, NodeToken n16, NodeToken n17) {
      f0 = n0;
      f1 = n1;
      f2 = n2;
      f3 = n3;
      f4 = n4;
      f5 = n5;
      f6 = n6;
      f7 = n7;
      f8 = n8;
      f9 = n9;
      f10 = n10;
      f11 = n11;
      f12 = n12;
      f13 = n13;
      f14 = n14;
      f15 = n15;
      f16 = n16;
      f17 = n17;
   }

   public MainClass(Identifier n0, NodeListOptional n1, Identifier n2, PrintStatement n3) {
      f0 = new NodeToken("class");
      f1 = n0;
      f2 = n1;
      f3 = new NodeToken("{");
      f4 = new NodeToken("public");
      f5 = new NodeToken("static");
      f6 = new NodeToken("void");
      f7 = new NodeToken("main");
      f8 = new NodeToken("(");
      f9 = new NodeToken("String");
      f10 = new NodeToken("[");
      f11 = new NodeToken("]");
      f12 = n2;
      f13 = new NodeToken(")");
      f14 = new NodeToken("{");
      f15 = n3;
      f16 = new NodeToken("}");
      f17 = new NodeToken("}");
   }

   public void accept(visitor.Visitor v) {
      v.visit(this);
   }
   public <R,A> R accept(visitor.GJVisitor<R,A> v, A argu) {
      return v.visit(this,argu);
   }
   public <R> R accept(visitor.GJNoArguVisitor<R> v) {
      return v.visit(this);
   }
   public <A> void accept(visitor.GJVoidVisitor<A> v, A argu) {
      v.visit(this,argu);
   }
}

