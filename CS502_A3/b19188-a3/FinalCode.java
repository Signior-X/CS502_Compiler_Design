//
// Generated by JTB 1.3.2
//

import visitor.*;
import syntaxtree.*;
import java.util.*;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */
public class FinalCode implements GJNoArguVisitor<String> {

   private String thisClass;
   private String thisMethod;
   private String finalCode;
   private Map<String, Integer> counters;
   
   private String methodTemps = "";
   private String methodBody = "";
   private boolean functionCallExists = false;

   // For each method, while travering, we need to
   // have which variable it is pointing to
   private Map<String, String> varReplacement;
   private Map<String, String> dynamicTypeOfVar;

   private String funArgs = "";

   FinalCode() {
      thisClass = "";
      thisMethod = "";
      finalCode = "";
      counters = new HashMap<String, Integer>();
      varReplacement = new HashMap<String, String>();
      dynamicTypeOfVar = new HashMap<String, String>();
   }

   private String getStaticObjectType(String var) {
      String baseClassName = Metadata.getObjectType(thisClass, thisMethod, var);      
      return baseClassName;
   }

   private String getDynamicObjectType(String var) {
      String baseClassName = Metadata.getObjectType(thisClass, thisMethod, var);
      // System.out.println("Static type: " + baseClassName);
      if (dynamicTypeOfVar.containsKey(var)) {
         baseClassName = dynamicTypeOfVar.get(var);
         // System.out.println("Dyanamic type: " + baseClassName);
      }

      return baseClassName;
   }

   private String getNextTempVar(String type) {
      String key = Metadata.getMethodKey(thisClass, thisMethod);

      if (!counters.containsKey(key)) {
         counters.put(key, 0);
      }

      int counter = counters.get(key);
      counters.put(key, counter + 1);
      String tempName = "priyam_" + counter;
      methodTemps += "    " + type + " " + tempName + ";\n";
      return tempName;
   }

   private void addToFinalCode(String line, int sp) {
      while(sp-- > 0) {
         finalCode += " ";
      }

      finalCode += line + "\n";
   }

   private void addToMethodCode(String line, int sp) {
      while(sp-- > 0) {
         methodBody += " ";
      }

      methodBody += line + "\n";
   }

   private void methodEnds() {
      if (functionCallExists) {
         methodTemps += "    Object vTablePtr;\n";
         methodTemps += "    String fnName;\n";
      }

      functionCallExists = false;
      finalCode += methodTemps + "\n";
      finalCode += methodBody;
      methodTemps = "";
      methodBody = "";
      thisMethod = "";
      varReplacement.clear();
      dynamicTypeOfVar.clear();
   }

   private String LoadForIdentifier(String var, String baseVar) {
      String baseClassName = getStaticObjectType(baseVar);

      // System.out.println("BAE CLASS NAME: " + baseClassName);
      int vrTableValue = 0;

      vrTableValue = Metadata.isClassField(baseClassName, thisMethod, var);

      if (vrTableValue < 0) {
         return var;
      }

      // This also implies that thisClass and thisMethod are not null
      // This implies class variable,
      // The definition will be created above, so, no worries
      String tempVar = "";
      if (varReplacement.containsKey(var)) {
         // already defined one temp variable for this
         // just resuse that temp variable name
         tempVar = varReplacement.get(var);
      } else {
         tempVar = getNextTempVar("int");
         varReplacement.put(var, tempVar);
      }

      addToMethodCode(tempVar + " = (Integer) load(" + baseVar + ", " + vrTableValue + ");", 4);
      return tempVar;
   }

   private String LoadStatement(String var) {
      int vrTableValue = Metadata.isClassField(thisClass, thisMethod, var);

      if (vrTableValue < 0) {
         return var;
      }

      // This also implies that thisClass and thisMethod are not null
      // This implies class variable,
      // The definition will be created above, so, no worries
      String tempVar = "";
      if (varReplacement.containsKey(var)) {
         // already defined one temp variable for this
         // just resuse that temp variable name
         tempVar = varReplacement.get(var);
      } else {
         tempVar = getNextTempVar("int");
         varReplacement.put(var, tempVar);
      }

      addToMethodCode(tempVar + " = (Integer) load(mthis, " + vrTableValue + ");", 4);
      return tempVar;
   }

   private boolean StoreForFieldStatements(String baseVar, String var, String value) {
      // base class - A, var - p, value - x
      // first find the base Class of base Var

      String baseClass = getStaticObjectType(baseVar);

      int vrTableValue = Metadata.isClassField(baseClass, thisMethod, var);
      if (vrTableValue < 0) {
         return false;
      }

      addToMethodCode("store(" + baseVar + ", " + vrTableValue + ", " + value + ");", 4);
      return true;
   }

   private boolean StoreStatement(String var, String value) {
      // set the store value of var to value
      int vrTableValue = Metadata.isClassField(thisClass, thisMethod, var);
      if (vrTableValue < 0) {
         return false;
      }

      addToMethodCode("store(mthis, " + vrTableValue + ", " + value + ");", 4);
      return true;
   }

   private int getFieldsSize(String varType) {
      return (Metadata.classes.get(varType).allFields.size() + 1);
   }

   private String HandleCreateObjectType(String varType) {
      String temp1 = getNextTempVar("Object");
      String temp2 = getNextTempVar("Object");

      // Storing the fields
      int fieldsSize = getFieldsSize(varType);
      addToMethodCode(temp1 + " = alloc(" + (fieldsSize * 4) + ");", 4);
      for (int i = 1; i < fieldsSize; i++) {
         addToMethodCode("store(" + temp1 + ", " + (i * 4) + ", 0);", 4);
      }
      addToMethodCode("", 0);

      // storing the functions
      int methodsSize = Metadata.classes.get(varType).allMethods.size();
      addToMethodCode(temp2 + " = alloc(" + (methodsSize * 4) + ");", 4);
      for (int i = 0; i < methodsSize; i++) {
         String methodKey = Metadata.classes.get(varType).allMethods.get(i);
         addToMethodCode("store(" + temp2 + ", " + (i * 4) + ", \"" + methodKey + "\");", 4);
      }
      addToMethodCode("", 0);

      addToMethodCode("store(" + temp1 + ", 0, " + temp2 + ");", 4);
      dynamicTypeOfVar.put(temp1, varType);
      return temp1;
   }

   //
   // Auto class visitors--probably don't need to be overridden.
   //
   public String visit(NodeList n) {
      String _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this);
         _count++;
      }
      return _ret;
   }

   public String visit(NodeListOptional n) {
      if ( n.present() ) {
         String _ret=null;
         int _count=0;
         for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
            e.nextElement().accept(this);
            _count++;
         }
         return _ret;
      }
      else
         return null;
   }

   public String visit(NodeOptional n) {
      if ( n.present() )
         return n.node.accept(this);
      else
         return null;
   }

   public String visit(NodeSequence n) {
      String _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this);
         _count++;
      }
      return _ret;
   }

   public String visit(NodeToken n) { return null; }

   //
   // User-generated visitor methods below
   //

   /**
    * f0 -> MainClass()
    * f1 -> ( TypeDeclaration() )*
    * f2 -> <EOF>
    */
   public String visit(Goal n) {
      String _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);

      finalCode += "}\n";
      // PRIYAM - printing the final code here
      System.out.println(finalCode);

      return _ret;
   }

   /**
    * f0 -> "package"
    * f1 -> Identifier()
    * f2 -> ";"
    * f3 -> "public class"
    * f4 -> Identifier()
    * f5 -> "{"
    * f6 -> "public"
    * f7 -> "static"
    * f8 -> "void"
    * f9 -> "main"
    * f10 -> "("
    * f11 -> "String"
    * f12 -> "["
    * f13 -> "]"
    * f14 -> Identifier()
    * f15 -> ")"
    * f16 -> "{"
    * f17 -> ( VarDeclaration() )*
    * f18 -> ( Statement() )*
    * f19 -> "}"
    * f20 -> "}"
    */
   public String visit(MainClass n) {
      String _ret=null;

      n.f0.accept(this);
      String packageName = n.f1.accept(this);
      finalCode += new StringBuilder()
                     .append("package " + packageName + ";\n\n")
                     .append("import static cs502.memmgr.MemMgr.*;\n\n")
                     .toString();

      n.f2.accept(this);
      n.f3.accept(this);
      String className = n.f4.accept(this);
      thisClass = className;
      n.f5.accept(this);
      n.f6.accept(this);
      n.f7.accept(this);
      n.f8.accept(this);
      n.f9.accept(this);
      n.f10.accept(this);
      n.f11.accept(this);
      n.f12.accept(this);
      n.f13.accept(this);
      String argName = n.f14.accept(this);
      n.f15.accept(this);
      n.f16.accept(this);

      thisMethod = "main";
      finalCode += new StringBuilder()
                     .append("public class " + "Main" + " {\n")
                     .append("  public static void main(String[] " + argName + ") {\n")
                     .toString();

      n.f17.accept(this);
      n.f18.accept(this);
      n.f19.accept(this);

      methodEnds();
      addToFinalCode("}", 2);
      n.f20.accept(this);
      // PRIYAM - Will add this where printing just before goal
      // so as to have them all the things in the main class
      // finalCode += "}\n";
      thisClass = "";
      return _ret;
   }

   /**
    * f0 -> ClassDeclaration()
    *       | ClassExtendsDeclaration()
    */
   public String visit(TypeDeclaration n) {
      String _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "{"
    * f3 -> ( FieldDeclaration() )*
    * f4 -> ( MethodDeclaration() )*
    * f5 -> "}"
    */
   public String visit(ClassDeclaration n) {
      String _ret=null;
      n.f0.accept(this);
      thisClass = n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
      n.f5.accept(this);
      thisClass = "";
      return _ret;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "extends"
    * f3 -> Identifier()
    * f4 -> "{"
    * f5 -> ( FieldDeclaration() )*
    * f6 -> ( MethodDeclaration() )*
    * f7 -> "}"
    */
   public String visit(ClassExtendsDeclaration n) {
      String _ret=null;
      n.f0.accept(this);
      thisClass = n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
      n.f5.accept(this);
      n.f6.accept(this);
      n.f7.accept(this);
      thisClass = "";
      return _ret;
   }

   /**
    * f0 -> Type()
    * f1 -> Identifier()
    * f2 -> ";"
    */
   public String visit(VarDeclaration n) {
      String _ret=null;
      String varType = n.f0.accept(this);
      String varName = n.f1.accept(this);

      if (varType == "int" || varType == "boolean" || varType == "String") {
         methodTemps += "    " + varType + " " + varName + ";\n";
      } else {
         // we need to handle the object creation here
         methodTemps += "    " + "Object" + " " + varName + ";\n";
      }
      
      n.f2.accept(this);
      return _ret;
   }

   /**
    * f0 -> IntegerType()
    * f1 -> Identifier()
    * f2 -> ";"
    */
   public String visit(FieldDeclaration n) {
      String _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      return _ret;
   }

   /**
    * f0 -> "public"
    * f1 -> IntegerType()
    * f2 -> Identifier()
    * f3 -> "("
    * f4 -> ( FormalParameterList() )?
    * f5 -> ")"
    * f6 -> "{"
    * f7 -> ( VarDeclaration() )*
    * f8 -> ( Statement() )*
    * f9 -> "return"
    * f10 -> SubPrimaryExpression()
    * f11 -> ";"
    * f12 -> "}"
    */
   public String visit(MethodDeclaration n) {
      String _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      String methodName = n.f2.accept(this);
      thisMethod = methodName;
      n.f3.accept(this);

      n.f4.accept(this);
      n.f5.accept(this);
      n.f6.accept(this);

      String paramsString = "";

      for (Variable var : Metadata.methods.get(Metadata.getMethodKey(thisClass, thisMethod)).parameters) {
         String varType = var.type;
         if (varType.equals("boolean") || varType.equals("int") || varType.equals("float") || varType.equals("String")
         || varType.equals("String[]")) {
         } else {
            varType = "Object";
         }

         paramsString += ", " + varType + " " + var.name;
      }

      addToFinalCode("public static int " + Metadata.getMethodKey(thisClass, methodName) + "(Object mthis" + paramsString + ") {", 2);

      n.f7.accept(this);
      n.f8.accept(this);
      n.f9.accept(this);
      String returnExpr = n.f10.accept(this);
      addToMethodCode("return " + returnExpr + ";", 4);

      n.f11.accept(this);
      n.f12.accept(this);

      methodEnds();
      addToFinalCode("}", 2);
      addToFinalCode("", 0);
      return _ret;
   }

   /**
    * f0 -> FormalParameter()
    * f1 -> ( FormalParameterRest() )*
    */
   public String visit(FormalParameterList n) {
      String _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      return _ret;
   }

   /**
    * f0 -> Type()
    * f1 -> Identifier()
    */
   public String visit(FormalParameter n) {
      String _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      return _ret;
   }

   /**
    * f0 -> ","
    * f1 -> FormalParameter()
    */
   public String visit(FormalParameterRest n) {
      String _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      return _ret;
   }

   /**
    * f0 -> BooleanType()
    *       | IntegerType()
    *       | StringType()
    *       | Identifier()
    */
   public String visit(Type n) {
      return n.f0.accept(this);
   }

   /**
    * f0 -> "boolean"
    */
   public String visit(BooleanType n) {
      return "boolean";
   }

   /**
    * f0 -> "int"
    */
   public String visit(IntegerType n) {
      return "int";
   }

   /**
    * f0 -> "String"
    */
   public String visit(StringType n) {
      return "String";
   }

   /**
    * f0 -> Block()
    *       | AssignmentStatement()
    *       | FieldAssignmentStatement()
    *       | IfStatement()
    *       | WhileStatement()
    *       | PrintStatement()
    */
   public String visit(Statement n) {
      String _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> "{"
    * f1 -> ( Statement() )*
    * f2 -> "}"
    */
   public String visit(Block n) {
      String _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "="
    * f2 -> Expression()
    * f3 -> ";"
    */
   public String visit(AssignmentStatement n) {
      String _ret=null;
      String identifier = n.f0.accept(this);
      n.f1.accept(this);
      String expr = n.f2.accept(this);

      if (dynamicTypeOfVar.containsKey(expr)) {
         // System.out.println("KEY contains" + identifier + expr);
         dynamicTypeOfVar.put(identifier, dynamicTypeOfVar.get(expr));
      }

      // TODO - check if this is needed
      // if (expr == "mthis") {
      //    // this pointer variable
      //    // create a replacement for the variable as
      //    // mthis
      //    varReplacement.put(identifier, expr);
      // }

      if (!StoreStatement(identifier, expr)) {
         // Not a store statement, so simple assignment
         addToMethodCode(identifier + " = " + expr + ";", 4);
      }
      n.f3.accept(this);
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "."
    * f2 -> Identifier()
    * f3 -> "="
    * f4 -> Identifier()
    * f5 -> ";"
    */
   public String visit(FieldAssignmentStatement n) {
      // we store the value by using dynamic type
      // p.x = a
      String _ret=null;
      String baseVar = n.f0.accept(this);
      n.f1.accept(this);
      String var = n.f2.accept(this);
      n.f3.accept(this);
      String value = n.f4.accept(this);
      n.f5.accept(this);
      StoreForFieldStatements(baseVar, var, value);
      return _ret;
   }

   /**
    * f0 -> "if"
    * f1 -> "("
    * f2 -> Identifier()
    * f3 -> ")"
    * f4 -> Statement()
    * f5 -> "else"
    * f6 -> Statement()
    */
   public String visit(IfStatement n) {
      // We just add in the method code and
      // block will automatically be created
      String _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      String iden = n.f2.accept(this);
      n.f3.accept(this);

      addToMethodCode("if (" + iden + ") {", 4);
      n.f4.accept(this);
      addToMethodCode("}", 4);

      n.f5.accept(this);

      addToMethodCode("else {", 4);
      n.f6.accept(this);
      addToMethodCode("}", 4);
      return _ret;
   }

   /**
    * f0 -> "while"
    * f1 -> "("
    * f2 -> Identifier()
    * f3 -> ")"
    * f4 -> Statement()
    */
   public String visit(WhileStatement n) {
      String _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      String iden = n.f2.accept(this);
      n.f3.accept(this);

      addToMethodCode("while (" + iden + ") {", 4);
      n.f4.accept(this);
      addToMethodCode("}", 4);

      return _ret;
   }

   /**
    * f0 -> "System.out.println"
    * f1 -> "("
    * f2 -> SubPrimaryExpression()
    * f3 -> ")"
    * f4 -> ";"
    */
   public String visit(PrintStatement n) {
      String _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      String subExpr = n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
      addToMethodCode("System.out.println(" + subExpr + ");", 4);
      return _ret;
   }

   /**
    * f0 -> OrExpression()
    *       | AndExpression()
    *       | CompareExpression()
    *       | NeqExpression()
    *       | PlusExpression()
    *       | MinusExpression()
    *       | TimesExpression()
    *       | DivExpression()
    *       | MessageSend()
    *       | FieldReference()
    *       | PrimaryExpression()
    */
   public String visit(Expression n) {
      return n.f0.accept(this);
   }

   /**
    * f0 -> SubPrimaryExpression()
    * f1 -> "&&"
    * f2 -> SubPrimaryExpression()
    */
   public String visit(AndExpression n) {
      String op1 = n.f0.accept(this);
      n.f1.accept(this);
      String op2 = n.f2.accept(this);
      String temp = getNextTempVar("boolean");
      addToMethodCode(temp + " = " + op1 + " && " + op2 + ";", 4);
      return temp;
   }

   /**
    * f0 -> SubPrimaryExpression()
    * f1 -> "||"
    * f2 -> SubPrimaryExpression()
    */
   public String visit(OrExpression n) {
      String op1 = n.f0.accept(this);
      n.f1.accept(this);
      String op2 = n.f2.accept(this);
      String temp = getNextTempVar("boolean");
      addToMethodCode(temp + " = " + op1 + " || " + op2 + ";", 4);
      return temp;
   }

   /**
    * f0 -> SubPrimaryExpression()
    * f1 -> "<"
    * f2 -> SubPrimaryExpression()
    */
   public String visit(CompareExpression n) {
      String op1 = n.f0.accept(this);
      n.f1.accept(this);
      String op2 = n.f2.accept(this);
      String temp = getNextTempVar("boolean");
      addToMethodCode(temp + " = " + op1 + " < " + op2 + ";", 4);
      return temp;
   }

   /**
    * f0 -> SubPrimaryExpression()
    * f1 -> "!="
    * f2 -> SubPrimaryExpression()
    */
   public String visit(NeqExpression n) {
      String op1 = n.f0.accept(this);
      n.f1.accept(this);
      String op2 = n.f2.accept(this);
      String temp = getNextTempVar("boolean");
      addToMethodCode(temp + " = " + op1 + " != " + op2 + ";", 4);
      return temp;
   }

   /**
    * f0 -> SubPrimaryExpression()
    * f1 -> "+"
    * f2 -> SubPrimaryExpression()
    */
   public String visit(PlusExpression n) {
      String op1 = n.f0.accept(this);
      n.f1.accept(this);
      String op2 = n.f2.accept(this);
      String temp = getNextTempVar("int");
      addToMethodCode(temp + " = " + op1 + " + " + op2 + ";", 4);
      return temp;
   }

   /**
    * f0 -> SubPrimaryExpression()
    * f1 -> "-"
    * f2 -> SubPrimaryExpression()
    */
   public String visit(MinusExpression n) {
      String op1 = n.f0.accept(this);
      n.f1.accept(this);
      String op2 = n.f2.accept(this);
      String temp = getNextTempVar("int");
      addToMethodCode(temp + " = " + op1 + " - " + op2 + ";", 4);
      return temp;
   }

   /**
    * f0 -> SubPrimaryExpression()
    * f1 -> "*"
    * f2 -> SubPrimaryExpression()
    */
   public String visit(TimesExpression n) {
      String op1 = n.f0.accept(this);
      n.f1.accept(this);
      String op2 = n.f2.accept(this);
      String temp = getNextTempVar("int");
      addToMethodCode(temp + " = " + op1 + " * " + op2 + ";", 4);
      return temp;
   }

   /**
    * f0 -> SubPrimaryExpression()
    * f1 -> "/"
    * f2 -> SubPrimaryExpression()
    */
   public String visit(DivExpression n) {
      String op1 = n.f0.accept(this);
      n.f1.accept(this);
      String op2 = n.f2.accept(this);
      String temp = getNextTempVar("int");
      addToMethodCode(temp + " = " + op1 + " / " + op2 + ";", 4);
      return temp;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "."
    * f2 -> Identifier()
    */
   public String visit(FieldReference n) {
      // a = p.x

      // We need class (dynamic) of p, op1
      // and if dynamic does not exist, return static

      String op1 = n.f0.accept(this);
      n.f1.accept(this);      
      String op2 = n.f2.accept(this);

      return LoadForIdentifier(op2, op1);
   }

   /**
    * f0 -> Identifier()
    * f1 -> "."
    * f2 -> Identifier()
    * f3 -> "("
    * f4 -> ( ArgList() )?
    * f5 -> ")"
    */
   public String visit(MessageSend n) {
      String _ret=null;
      String fBase = n.f0.accept(this);
      n.f1.accept(this);
      String fName = n.f2.accept(this);
      n.f3.accept(this);
      funArgs = "";
      n.f4.accept(this);
      n.f5.accept(this);

      functionCallExists = true;
      addToMethodCode("", 0);
      addToMethodCode("vTablePtr = load(" + fBase + ", 0);", 4);

      // I need to know the type of fBase!!
      // Functions are dynamically called
      String baseType = getDynamicObjectType(fBase);
      // System.out.println("BASE: " + fBase);
      // System.out.println(Metadata.methods.get(Metadata.getMethodKey(thisClass, thisMethod)));
      // System.out.println("BASE Type: " + baseType);
      int methodPoint = Metadata.getMethodPoint(baseType, fName);
      addToMethodCode("fnName = (String) load(vTablePtr, " + methodPoint + ");", 4);
      return "(Integer) callFunc(fnName, " + fBase + funArgs + ")";
   }

   /**
    * f0 -> SubPrimaryExpression()
    * f1 -> ( ArgRest() )*
    */
   public String visit(ArgList n) {
      String _ret=null;
      String firstArg = n.f0.accept(this);
      // System.out.println("RPIYAM first args: " + firstArg);

      funArgs += ", " + firstArg;
      n.f1.accept(this);
      return _ret;
   }

   /**
    * f0 -> ","
    * f1 -> SubPrimaryExpression()
    */
   public String visit(ArgRest n) {
      String _ret=null;
      n.f0.accept(this);
      String arg = n.f1.accept(this);
      // System.out.println("RPIYAM args: " + arg);
      funArgs += ", " + arg;

      return _ret;
   }

   /**
    * f0 -> IntegerLiteral()
    *       | TrueLiteral()
    *       | FalseLiteral()
    *       | Identifier()
    *       | ThisExpression()
    *       | AllocationExpression()
    *       | NotExpression()
    */
   public String visit(PrimaryExpression n) {
      // return n.f0.accept(this);
      return LoadStatement(n.f0.accept(this));
   }

   /**
    * f0 -> IntegerLiteral()
    *       | TrueLiteral()
    *       | FalseLiteral()
    *       | Identifier()
    */
   public String visit(SubPrimaryExpression n) {
      String subExpr = n.f0.accept(this);
      return LoadStatement(subExpr);
   }

   /**
    * f0 -> <INTEGER_LITERAL>
    */
   public String visit(IntegerLiteral n) {
      return n.f0.tokenImage;
   }

   /**
    * f0 -> "true"
    */
   public String visit(TrueLiteral n) {
      return n.f0.tokenImage;
   }

   /**
    * f0 -> "false"
    */
   public String visit(FalseLiteral n) {
      return n.f0.tokenImage;
   }

   /**
    * f0 -> <IDENTIFIER>
    */
   public String visit(Identifier n) {
      // The logic for variable to be parameter or class variable
      String identifier = n.f0.tokenImage;
      return identifier;
   }

   /**
    * f0 -> "this"
    */
   public String visit(ThisExpression n) {
      n.f0.accept(this);
      return "mthis";
   }

   /**
    * f0 -> "new"
    * f1 -> Identifier()
    * f2 -> "("
    * f3 -> ")"
    */
   public String visit(AllocationExpression n) {
      // Dynamic type!
      // DO we need? - yes

      // Also instead of doing Object allocation using
      // static type, do like this

      String _ret=null;
      n.f0.accept(this);
      String identifier = n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      return HandleCreateObjectType(identifier);
   }

   /**
    * f0 -> "!"
    * f1 -> Identifier()
    */
   public String visit(NotExpression n) {
      n.f0.accept(this);
      String identifier = n.f1.accept(this);
      return "!" + LoadStatement(identifier);
   }

}
